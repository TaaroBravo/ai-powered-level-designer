using System.Text;

namespace AILevelDesigner
{
    public class PromptBuilder
    {
        public static string BuildSystemMessage(string schemaJson)
        {
            var sb = new StringBuilder();
            sb.AppendLine("You generate level layouts for a Unity editor tool.");
            sb.AppendLine("Output requirements:");
            sb.AppendLine("- Return ONLY a single JSON object. No prose, no markdown, no code fences.");
            sb.AppendLine("- The JSON MUST validate against the JSON Schema provided below.");
            sb.AppendLine("- Use ONLY object IDs present in the provided catalog.");
            sb.AppendLine("- Do NOT invent new fields or properties.");
            sb.AppendLine("- Units: meters. Axis: Y is up.");
            sb.AppendLine("- Keep positions near the origin and within the arena rectangle; avoid very large coordinates.");
            sb.AppendLine("Return compact JSON without extra spaces or line breaks.");
            sb.AppendLine();
            sb.AppendLine("JSON Schema:");
            sb.AppendLine(string.IsNullOrWhiteSpace(schemaJson) ? "{}" : schemaJson);
            return sb.ToString();
        }

        public static string BuildUserMessage(string userPrompt, string capabilitiesJson)
        {
            var sb = new StringBuilder();
            sb.AppendLine("Capabilities (catalog, constraints, and world context):");
            sb.AppendLine(string.IsNullOrWhiteSpace(capabilitiesJson) ? "{}" : capabilitiesJson);
            sb.AppendLine();
            sb.AppendLine("User request:");
            sb.AppendLine(userPrompt ?? string.Empty);
            sb.AppendLine();

            sb.AppendLine("GRID POLICY (applies only if capabilities.coordinateSpace == \"Grid\"):");
            sb.AppendLine("- Treat positions as INTEGER grid cell coordinates (x,z) with x in [0..gridWidth-1] and z in [0..gridHeight-1].");
            sb.AppendLine("- Each position refers to the CENTER of the cell; set y = 0.");
            sb.AppendLine("- Use only orthogonal adjacency (up/down/left/right). Avoid diagonals.");
            sb.AppendLine("- If the catalog includes dedicated path tiles (e.g., TD.PathTile), output EVERY path cell as a separate object forming ONE continuous path.");
            sb.AppendLine("- Prefer start/spawner on an outer edge cell and base/goal on the opposite edge.");
            sb.AppendLine("For tower-defense grid, you may omit TD.PathTile objects; only include spawner, base, tower slots and decorations. The path will be generated by the builder.");
            sb.AppendLine();

            sb.AppendLine("WORLD POLICY (applies only if capabilities.coordinateSpace == \"World\"):");
            sb.AppendLine("- Positions can be real-valued; y = 0. If a 'step' or snapping is provided in capabilities, use multiples of that step.");
            sb.AppendLine();

            sb.AppendLine("Important:");
            sb.AppendLine("- Treat `worldDescription` inside capabilities as HIGH-PRIORITY environmental context (e.g., desert => sparse vegetation).");
            sb.AppendLine("- gameType must equal capabilities.gameType.");
            sb.AppendLine("- Every object must include: id (from catalog) and position {x,y,z}.");
            sb.AppendLine("- Respect maxPerLevel for each id.");
            sb.AppendLine("Return only the JSON object; do not wrap it in any extra characters.");
            return sb.ToString();
        }
    }
}
